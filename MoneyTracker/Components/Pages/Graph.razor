@page "/graph"
@inherits LayoutComponentBase
@using MoneyTracker.Models;

<h3>Graph</h3>
<p>@last</p>
<p>@Test</p>
<BarChart @ref="barChart" Class="mb-4" />

@inject Context.PriceAppContext dbContext;
@code {
    private string Test = "0.0";
    private string last = "0.0";
    private BarChart barChart;

    protected override async Task OnInitializedAsync()
    {
        var v = dbContext.Activities.ToList();
        var lastIncome = v.Where(x => x.Name == "FOD").Last();
        var lastIncomeList = v.Where(x => x.Time >= lastIncome.Time)
            .Where(x => x.Price < 0)
            .ToList();

        // var PrevIncome = v.Where(x => x.Name == "FOD").TakeLast(2).First();
        var prevIncomeList = v.Where(x => x.Time < lastIncome.Time)
            .Where(x => x.Price < 0)
            .OrderBy(x => x.Type)
            .ToList();
        Test = "current spend: " + (-lastIncomeList.Sum(x => x.Price)).ToString();
        last = "last spend: " + (-prevIncomeList.Sum(x => x.Price)).ToString();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RenderManhattanAsync();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task RenderManhattanAsync()
    {
        var v = dbContext.Activities.ToList();
        var lastIncome = v.Where(x => x.Name == "FOD").Last();
        var lastIncomeList = v.Where(x => x.Time >= lastIncome.Time)
            .Where(x => x.Price < 0)
            .ToList();

        // var PrevIncome = v.Where(x => x.Name == "FOD").TakeLast(2).First();
        var prevIncomeList = v.Where(x => x.Time < lastIncome.Time)
            .Where(x => x.Price < 0)
            .OrderBy(x => x.Type)
            .ToList();

        var pt = prevIncomeList.GroupBy(x => x.Type)
            .Select(x => (x.Key, Math.Abs(x.Sum(y => y.Price))))
            .ToList();
        var ct = lastIncomeList.GroupBy(x => x.Type)
            .Select(x => (x.Key, Math.Abs(x.Sum(y => y.Price))))
            .ToList();

        var data = new ChartData
            {
                Labels = new List<string>{
                    "0 - payment",
                    "1 - Debt",
                    "2 - Food",
                    "3 - Health",
                    "4 - Incurence",
                    "5 - Transport",
                    "6 - Fittness",
                    "7 - Solidaris",
                    "8 - PayPal",
                    "9 - A",
                    "10 - Investments",
                    "11 - Utilities"
                },//Enumerable.Range(0, pt.Count).Select(x => $"{x}").ToList(),
                Datasets = new List<IChartDataset>()
                {
                    new BarChartDataset()
                    {
                        Label = "Avrage",
                        Data = pt.Select(x => x.Item2).ToList(),
                        BackgroundColor = new List<string>{ "rgb(88, 80, 141)" },
                        CategoryPercentage = 0.8,
                        BarPercentage = 1,
                    },
                    new BarChartDataset()
                    {
                        Label = "Current",
                        Data = Enumerable.Range(0, pt.Count).Select(x => ct.Any(y => y.Key == x) ? ct.FirstOrDefault(y => y.Key==x).Item2 : 0.0).ToList(),
                        BackgroundColor = new List<string> { "rgb(255, 166, 0)" },
                        CategoryPercentage = 0.8,
                        BarPercentage = 1,
                    }
                }
            };

        var options = new BarChartOptions();

        options.Interaction.Mode = InteractionMode.Index;

        options.Plugins.Title.Text = "MANHATTAN";
        options.Plugins.Title.Display = true;
        options.Plugins.Title.Font.Size = 20;

        options.Responsive = true;

        options.Scales.X.Title.Text = "Overs";
        options.Scales.X.Title.Display = true;

        options.Scales.Y.Title.Text = "Runs";
        options.Scales.Y.Title.Display = true;

        await barChart.InitializeAsync(data, options);
    }
}
